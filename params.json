{"name":"Getting Started","tagline":"","body":"# LiveTex SDK. Стартовая документация\r\n\r\n**Livetex SDK** предоставляет инструментарий для реализации возможность \r\nконсультировать пользователей мобильных приложений. \r\n\r\nФункциональность:\r\n- возможность выбора департамента и оператора для диалога;\r\n- создание и завершение диалога;\r\n- передача и прием текстовых сообщений;\r\n- прием файлов от оператора;\r\n- мгновенное оповещение о событиях: бан, оповещение о наборе, \r\nудерживающие сообщения, изменение оператора диалога,\r\nзакрытие диалога оператором;\r\n- просмотр истории сообщений;\r\n\r\nДокументация API: \r\n- [Android](http://splusminusx.github.io/java/index.html) \r\n- [iOS](http://splusminusx.github.io/ios/index.html)\r\n\r\nDemo-приложение: \r\n- [Android](https://github.com/LiveTex/Livetex-Android-SDK-Demo) \r\n- [iOS](https://github.com/LiveTex/Livetex-iOS-SDK-Demo)\r\n\r\n## С чего начать?\r\n\r\n### Шаг 1. Создание аккаунта\r\nРегистрируемся в системе [Livetex](https://billing.livetex.ru/signup/), \r\nдобавляем [оператора](https://billing.livetex.ru/operators/operator/add/) и \r\n[сайт](https://billing.livetex.ru/site/add).\r\n\r\n### Шаг 2. Получение инструментов\r\n[Запрашиваем](mailto:sdk@livetex.ru) ключ разработчика, доступ к \r\n\"песочнице\" и бинарный пакет SDK. В письме необходимо указать идентификатор\r\nаккаунта и название платформы.\r\n\r\n### Шаг 3. Добавление библиотеки SDK к проекту\r\nПример добавления библиотеки SDK к проекту можно найти в репозитории с \r\ndemo-приложением.\r\n\r\n### Шаг 4. Разработка обработчиков оповещений от сервера\r\nLivetex SDK предоставляет возможность мгновенного оповещения о новых \r\nсобытиях от сервера. Новые события могут влиять на отображение информации \r\nпользователю приложения. Livetex SDK требует от разработчика реализации \r\nобработчика оповещений от сервера. Детали интерфейса обработчика можно найти \r\nпо ссылкам:\r\n- INotificationHandler [Android](http://splusminusx.github.io/java/nit/livetex/mymodule/sdk/handler/INotificationDialogHandler.html#INotificationDialogHandler)\r\n- LTMobileSDKNotificationHandlerProtocol [iOS](http://splusminusx.github.io/ios/Protocols/LTMbileSDKNotificationHandlerProtocol/index.html#//apple_ref/occ/intf/LTMbileSDKNotificationHandlerProtocol)\r\n\r\n\r\nПример обработчика оповещений на Java с функциональностью открытия диалога и отсылки сообщения.\r\n```java\r\n\r\n// Обработчик инициализации.\r\nclass CustomInitHandler implements IInitHandler {\r\n  \r\n  private Livetex sdk;\r\n\r\n  CustomInitHandler(Livetex livetex) {\r\n    sdk = livetex;\r\n  }\r\n   \r\n  // В случае успешной инициализации сохраняем переданный токен и создаем обращение.\r\n  public void onSuccess(String token) {\r\n    saveTokenToCustomClientStorage(token);\r\n    sdk.request(new AHandler<State>());\r\n  }\r\n}\r\n\r\nclass CustomNotificationHandler implements INotificationHandler {\r\n  \r\n  private Livetex sdk;\r\n\r\n  CustomNotificationHandler(Livetex livetex) {\r\n    sdk = livetex;\r\n  }\r\n\r\n  ...\r\n\r\n  // При назначении оператора для диалога отправляем приветственное сообщение.\r\n  public void updateDialogState(DialogState state) {\r\n    if (state.isSetEmployee()) {\r\n      sdk.sendTextMessage(\"Hello\", new AHandler<TextMessage>());\r\n    }\r\n  }\r\n\r\n  // Логируем сообщения оператора.\r\n  public void receiveTextMessage(TextMessage message) {\r\n    System.out.println(message.getText());\r\n  }\r\n  ...\r\n}\r\n\r\n```\r\n\r\nПример обработчика оповещений на Objective-c с функциональностью открытия диалога и отсылки сообщения.\r\n\r\n```objective-c\r\n\r\n@interface LTCustomNotificationDelegate : NSObject  <LTMobileSDKNotificationHandlerProtocol>\r\n@property(nonatomic, copy) void (^callBack) (id data);\r\n@end\r\n\r\n...\r\n\r\n@implementation LTCustomNotificationDelegate\r\n\r\n// Обработка изменения состояния.\r\n- (void) updateDialogState: (LTDialogState *) state\r\n{\r\n    // Проверяем назначен ли оператор для диалога.\r\n    if (state.employee != nil) {\r\n      // Отправляем сообщение.\r\n      [sdk sendMessage:@\"Hello\" success:^(LTTextMessage *message) {\r\n        ...\r\n      } failure:^(NSException *chatExeption) {\r\n        ...\r\n      }];\r\n    }\r\n}\r\n\r\n// Обработка нового сообщения от оператора.\r\n- (void) receiveTextMessage: (LTTextMessage *) message\r\n{\r\n    NSLog(message.text);\r\n}\r\n@end\r\n\r\n```\r\n   \r\n### Шаг 5. Инициализация SDK\r\n\r\nПример инициализации Android SDK в основном потоке приложения.\r\n\r\n```java\r\n// URL сервиса аутентификации, получен на втором шаге данного гайда.\r\nstring url = \"http://authentication-sandbox.livetex.ru:9000\";\r\n\r\n// Ключ SDK для аутентификации кодовой базы клиент, получен на втором шаге данного гайда.\r\nstring key = \"NEVER_SHOW_THIS_KEY_TO_STRANGERS\";\r\n\r\n// Идентификатор приложения клиента - это идентификатор сайта, который можно \r\n// получить в личном кабинете.\r\nstring application = \"10001350\";\r\n\r\n// Список возможностей реализованных в клиентском приложении.\r\nList<Capabilities> capabilities = new ArrayList<Capabilities>();\r\n  \r\n// Клиентское приложение умеет вести диалог.\r\ncapabilities.add(Capabilities.CHAT);\r\n  \r\n// Клиентское приложение умеет принимать файлы.\r\ncapabilities.add(Capabilities.FILES_RECEIVE);\r\n\r\n// Получение токена аутентификации из персистентного хранилища клиента SDK.\r\n// Реализуется на усмотрение разработчика. На этапе инициализации SDK можно\r\n// указать уникальный токен для идентификации клиента и восстановления \r\n// истории переписки. Если токен указан не будет система создаст нового \r\n// клиента.    \r\nString token = getTokenFromCustomClientStorage();\r\n\r\nBuilder builder = new Builder(context, key, application);\r\nbuilder.addCapabilities(capabilities);\r\nbuilder.addToken(token);\r\nbuilder.addUrl(url);\r\n\r\nLivetex livetex = new builder.build();\r\n \r\n// Обработчик инициализации SDK реализуется разработчиком.\r\nCustomInitHandler initHandler = new CustomInitHandler(livetex);\r\n// Обработчик оповещений от сервера реализуется разработчиком.\r\nCustomNotificationHandler notificationHandler = new CustomNotificationHandler(livetex);\r\n\r\nlivetex.init(initHandler, notificationHandler);\r\n```\r\n\r\nПример инициализации iOS SDK в основном потоке приложения.\r\n\r\n```objective-c\r\nLTMobileSDKInitializationParams *params = [LTMobileSDKInitializationParams new];\r\n\r\n// URL сервиса аутентификации, получен на втором шаге данного гайда.\r\nparams.livetexUrl = @\"http://authentication-sandbox.livetex.ru:9000\";\r\n\r\n// Ключ SDK для аутентификации кодовой базы клиент, получен на втором шаге данного гайда.\r\nparams.sdkKey = @\"NEVER_SHOW_THIS_KEY_TO_STRANGERS\";\r\n\r\n\r\n// Идентификатор приложения клиента - это идентификатор сайта, который можно \r\n// получить в личном кабинете.\r\nparams.applicationId = @\"10001350\";\r\n\r\nparams.callbackQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);\r\n\r\nLTMobileSDK *sdk = [[LTMobileSDK alloc] initWithParams:params];\r\n\r\n// Инициализация кастомного обработчика оповещений.\r\nLTCustomNotificationDelegate *delegate = [LTCustomNotificationDelegate new];\r\nsdk.delegate = delegate;\r\n\r\n// Инициализация SDK.\r\n[sdk runWithSuccess:^(NSString *token) {\r\n    \r\n    // Запрос диалога с любым оператормо сайта.\r\n    [sdk requestWithSuccess:^(LTDialogState *state) {\r\n        //...\r\n    } failure:^(NSException *chatExeption) {\r\n        //...\r\n    }];\r\n    \r\n} failure:^(NSException *exception) {\r\n    \r\n    [self tstPassedBAD];\r\n}];\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}