{"name":"Getting Started","tagline":"","body":"# LiveTex SDK. Стартовая документация.\r\n\r\n## Глоссарий\r\n\r\n__LiveTex SDK__ - Software Developer Kit. Набор инструментов для интеграции с системой LiveTex.\r\n\r\n__Мобильный клиент__ или __клиент__ - конечный пользователь SDK, пользователь приложения с интегрированным SDK.\r\n\r\n__Приложение__ - программа для предоставления возможности коммуникации с клиентом.\r\n\r\n__Ключ SDK__ - уникальный идентификатор разработчика приложения.\r\n\r\n__Клиентское приложение__ - программа осуществляющая интеграцию с SDK.\r\n\r\n__Токен посетителя__ - уникальный идентификатор посетителя.\r\n\r\n## Что мы предлагаем?\r\n\r\n- Сущностную модель и API. [Android](http://splusminusx.github.io/java/index.html) [iOS](http://splusminusx.github.io/ios/index.html) \r\n- Огромную возможность кастомизации UI.\r\n- Демонстрационное приложение с примером использования SDK.\r\n\r\n\r\n## Архитектура приложения использующего LiveTex SDK\r\n\r\n### Описание интерфейсов. Android.\r\n\r\n![Модель](http://goo.gl/ICS0LE)\r\n\r\n<!--\r\n@startuml\r\n\r\ncomponent App {\r\n\r\n  interface IInitHandler\r\n  interface INotificationHandler\r\n  interface ILivetex\r\n\r\n  component LiveTexSDK\r\n  component CustomInitHandler\r\n  component CustomNotificationHandler\r\n  \r\n  LiveTexSDK .left.> IInitHandler: use\r\n  LiveTexSDK ..> INotificationHandler: use\r\n  LiveTexSDK -right- ILivetex: provide\r\n  \r\n  CustomInitHandler -right- IInitHandler: provide\r\n  CustomNotificationHandler -right- INotificationHandler: provide \r\n  \r\n}\r\n\r\n@enduml\r\n-->\r\n\r\n\r\n```java\r\n\r\npublic interface IInitHandler {\r\n  \r\n    /**\r\n     * Обработка результат успешной инициализации SDK.\r\n     *\r\n     * @param token - идентификатор посетителя.\r\n     */\r\n    void onSuccess(String token);\r\n    \r\n    /**\r\n     * Обработчик ошибки инициализации.\r\n     */\r\n    void onError(String error);\r\n}\r\n\r\n```\r\n\r\n`IInitHandler` - обработчик события инициализации SDK, после вызова метода \r\n`onSuccess` данного обработчика можно начинать взаимодействие с экземпляром \r\n`Livetex`. Обработчик успешной инициализации принимает аргументом уникальный \r\nтокен посетителя `token`. Токен может быть использован при повторной \r\nинициализации SDK. Необходим для восстановления истории переписки посетителя.\r\n\r\n\r\n```java\r\n\r\npublic interface INotificationHandler {\r\n    /**\r\n     * Оповещение посетителя о блокировке.\r\n     *\r\n     *\r\n     * @param message сообщение блокировки.\r\n     *\r\n     */\r\n    void ban(String message);\r\n\r\n    /**\r\n     * Оповещение об изменении состояния сервиса диалога.\r\n     *\r\n     *\r\n     * @param state  новое состояние интерфейса сервиса диалога.\r\n     *\r\n     */\r\n    void updateDialogState(DialogState state);\r\n\r\n    /**\r\n     * Оповещение о переданном файле.\r\n     *\r\n     *\r\n     * @param message сообщение передачи файла.\r\n     *\r\n     */\r\n    void receiveFileMessage(FileMessage message);\r\n\r\n    /**\r\n     * Оповещение о переданном текстовом сообщении.\r\n     *\r\n     *\r\n     * @param message  текстовое сообщение.\r\n     *\r\n     */\r\n    void receiveTextMessage(TextMessage message);\r\n\r\n    /**\r\n     * Оповещение о новом удерживающем сообщении.\r\n     *\r\n     *\r\n     * @param message удерживающее сообщение.\r\n     *\r\n     */\r\n    void receiveHoldMessage(HoldMessage message);\r\n\r\n    /**\r\n     * Оповещение о наборе текста.\r\n     *\r\n     *\r\n     * @param message сообщение оповещения о наборе текста.\r\n     *\r\n     */\r\n    void receiveTypingMessage(TypingMessage message);\r\n\r\n    /**\r\n     * Обработчик ошибок.\r\n     */\r\n    void onError(String message);\r\n}\r\n\r\n```   \r\n\r\n`INotificationHandler` - обработчик оповещений от сервера. \r\n\r\n\r\n```java\r\n\r\npublic interface ILivetex {\r\n\r\n    /**\r\n     * Инициализация SDK\r\n     *\r\n     * @param handler - обработчик результата инициализации.\r\n     *\r\n     * @param notificationHandler - обработчик оповещений.\r\n     */\r\n    void init(final IInitHandler handler, final INotificationHandler notificationHandler);\r\n    \r\n    /**\r\n     * Разрушение SDK.\r\n     */\r\n    void destroy();\r\n\r\n    /**\r\n     * Запрос собеседника для диалога.\r\n     *\r\n     * @param handler - обработчик\r\n     */\r\n    void request(AHandler<DialogState> handler);\r\n\r\n    /**\r\n     * Запрос собеседника для диалога.\r\n     *\r\n     * @param attributes - данные сопутствующие диалогу.\r\n     * @param handler    - обработчик\r\n     */\r\n    void request(DialogAttributes attributes, AHandler<DialogState> handler)\r\n\r\n    /**\r\n     * Запрос диалога с конкретным оператором.\r\n     *\r\n     * @param operator - оператор, к которым необходимо начать диалог.\r\n     * @param handler  - обработчик\r\n     */\r\n    void request(Employee operator, AHandler<DialogState> handler)\r\n\r\n    /**\r\n     * Запрос диалога с конкретным оператором.\r\n     *\r\n     * @param operator   - оператор, к которым необходимо начать диалог.\r\n     * @param attributes - данные сопутствующие диалогу.\r\n     * @param handler    - обработчик\r\n     */\r\n    void request(Employee operator, DialogAttributes attributes, AHandler<DialogState> handler)\r\n\r\n    /**\r\n     * Запрос диалога с операторами указанного департамента.\r\n     *\r\n     * @param department - департамент, с оператором которого необходимо начать диалог.\r\n     * @param handler    - обработчик\r\n     */\r\n    void request(Department department, AHandler<DialogState> handler);\r\n\r\n    /**\r\n     * Запрос диалога с операторами указанного департамента.\r\n     *\r\n     * @param department - департамент, с оператором которого необходимо начать диалог.\r\n     * @param attributes - данные сопутствующие диалогу.\r\n     * @param handler    - обработчик\r\n     */\r\n    void request(Department department, DialogAttributes attributes, AHandler<DialogState> handler);\r\n    \r\n    /**\r\n     * Прекращение диалога с собеседником.\r\n     *\r\n     * @param handler - обработчик\r\n     */\r\n    void close(AHandler<DialogState> handler);\r\n\r\n    /**\r\n     * Оценка диалога с собеседником.\r\n     *\r\n     * @param vote    - оценка собеседника.\r\n     * @param handler - обработчик\r\n     */\r\n    void vote(Vote vote, AHandler handler);\r\n\r\n    /**\r\n     * Оповещение о наборе текста.\r\n     *\r\n     * @param message - набранное сообщение.\r\n     * @param handler - обработчик\r\n     */\r\n    void typing(TypingMessage message, AHandler handler);\r\n\r\n    /**\r\n     * Отправка текстового сообщения.\r\n     *\r\n     * @param text    - текст сообщения.\r\n     * @param handler - обработчик\r\n     */\r\n    void sendTextMessage(String text, AHandler<TextMessage> handler);\r\n\r\n    /**\r\n     * Подтверждение получения сообщения. Необходимо вызывать\r\n     * при получение сообщения от собеседника.\r\n     *\r\n     * @param message - текст сообщения.\r\n     * @param handler - обработчик\r\n     */\r\n    void confirmTextMessage(livetex.message.TextMessage message, AHandler handler);\r\n\r\n    /**\r\n     * Получение истории сообщений диалога.\r\n     *\r\n     * @param limit   - количество запрашиваемых сообщений из истории.\r\n     * @param offset  - количество пропускаемых сообщений истории.\r\n     * @param handler - обработчик\r\n     */\r\n    void messageHistory(short limit, short offset, AHandler<List<TextMessage>> handler);\r\n\r\n    /**\r\n     * Установка имени посетителя.\r\n     *\r\n     * @param name    - имя посетителя.\r\n     * @param handler - обработчик\r\n     */\r\n    void setName(String name, AHandler handler);\r\n\r\n    /**\r\n     * Получение списка операторов с указанным статусом.\r\n     *\r\n     * @param status  - интересующий статус.\r\n     * @param handler - обработчик\r\n     */\r\n    void getOperators(String status, AHandler<ArrayList<Employee>> handler);\r\n\r\n    /**\r\n     * Получение списка департаментов, в котором присутствуют операторы\r\n     * с указанным статусом.\r\n     *\r\n     * @param status  - интересующий статус.\r\n     * @param handler - обработчик\r\n     */\r\n    void getDepartments(String status, AHandler<ArrayList<Department>> handler);\r\n\r\n    /**\r\n     * Получение списка операторов привязанных к указанному департаменту.\r\n     *\r\n     * @param department - департамент, операторы которого будут получены.\r\n     * @param handler    - обработчик\r\n     */\r\n    void getDepartmentOperators(Department department, AHandler<ArrayList<Employee>> handler);\r\n}\r\n\r\n```\r\n\r\n### Описание интерфейсов. iOS\r\n\r\n![Модель](http://goo.gl/9O66MD)\r\n\r\n<!--\r\n@startuml\r\n\r\ncomponent App {\r\n\r\n  interface LTMobileSDKNotificationHandlerProtocol\r\n  interface LTMobileSDK\r\n\r\n  component LiveTexSDK\r\n  component CustomNotificationHandler\r\n  \r\n  LiveTexSDK ..> LTMobileSDKNotificationHandlerProtocol: use\r\n  LiveTexSDK -- LTMobileSDK: provide\r\n  \r\n  CustomNotificationHandler -- LTMobileSDKNotificationHandlerProtocol: provide \r\n  \r\n}\r\n\r\n@enduml\r\n-->\r\n\r\n\r\n```objective-c\r\n/*!\r\n Протокол делегата для работы с нотификациями сервиса нотификаций диалога\r\n \r\n @warning Методы делегата выполняется синхронно на главном потоке относительно параллельного потока рабочей последовательной\r\n очереди SDK (serial queue) с использованием механизма Grand Central Dispatch и библиотеки libdispatch.\r\n */\r\n\r\n@protocol LTMobileSDKNotificationHandlerProtocol <NSObject>\r\n\r\n/*!\r\n Бан посетителя с указанием сообщения причины.\r\n */\r\n- (void) ban: (NSString *) message;\r\n/*!\r\n Обновление состояния диалога\r\n */\r\n- (void) updateDialogState: (LTDialogState *) state;\r\n/*!\r\n Передача фаила\r\n */\r\n- (void) receiveFileMessage: (LTFileMessage *) message;\r\n/*!\r\n Новое сообщение пользователю\r\n */\r\n- (void) receiveTextMessage: (LTTextMessage *) message;\r\n/*!\r\n Подтверждение набора сообщения\r\n */\r\n- (void) confirmTextMessage: (LTTextMessage *) message;\r\n/*!\r\n Удерживающее сообщение\r\n */\r\n- (void) receiveHoldMessage: (LTHoldMessage *) message;\r\n/*!\r\n Получение нотификации\r\n */\r\n- (void) receiveTypingMessage: (LTTypingMessage *) message;\r\n\r\n@end\r\n```\r\n\r\n`LTMobileSDKNotificationHandlerProtocol` - обработчик оповещений от сервера.\r\n\r\n```objective-c\r\n@interface LTMobileSDK : NSObject\r\n\r\n- (instancetype)initWithParams:(LTMobileSDKInitializationParams*)params;\r\n\r\n- (void)runWithSuccess:(void(^)(NSString *token))success\r\n               failure:(void(^)(NSException *exception))failure;\r\n\r\n/*!\r\n Запрос диалога с конкретным оператором.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, \r\n параметром у которого явлется объект типа NSException\r\n пойманый при выполнии операции в параллельном потоке очереди SDK.\r\n */\r\n\r\n- (void)requestWithSuccess:(void(^)(LTDialogState *state))success\r\n                   failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Запрос диалога с конкретным оператором.\r\n \r\n @param attributes данные сопутствующие диалогу.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в случае неверных\r\n атрибутов диалога.\r\n */\r\n\r\n- (void)requestWithDialogAttributes:(LTDialogAttributes*)attributes\r\n                            success:(void(^)(LTDialogState *state))success\r\n                            failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Запрос диалога с конкретным оператором.\r\n @param mOperator оператор, к которым необходимо начать диалог.\r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа \r\n LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSException\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае неверных атрибутов диалога или при указании невалидного оператора.\r\n */\r\n\r\n- (void)requestWithOperator:(LTEmployeeId)employeeId\r\n                        success:(void(^)(LTDialogState *state))success\r\n                        failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Запрос диалога с конкретным оператором.\r\n @param mOperator оператор, к которым необходимо начать диалог.\r\n @param attributes данные сопутствующие диалогу.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае неверных атрибутов диалога или при указании невалидного оператора.\r\n */\r\n\r\n- (void)requestWithOperator:(LTEmployeeId)employeeId\r\n                 dialogAttributes:(LTDialogAttributes*)attributes\r\n                          success:(void(^)(LTDialogState *state))success\r\n                          failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Запрос диалога с операторами указанного департамента.\r\n @param department департамент, с оператом которого необходимо начать диалог.\r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать при указании \r\n невалидного депертамента.\r\n */\r\n\r\n- (void)requestWithDepartment:(LTDepartmentId)departmentId\r\n                      success:(void(^)(LTDialogState *state))success\r\n                      failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Запрос диалога с операторами указанного департамента.\r\n @param department департамент, с оператом которого необходимо начать диалог.\r\n @param attributes данные сопутствующие диалогу.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае неверных атрибутов диалога или при указании невалидного депертамента.\r\n */\r\n\r\n- (void)requestWithDepartment:(LTDepartmentId)departmentId\r\n             dialogAttributes:(LTDialogAttributes*)attributes\r\n                      success:(void(^)(LTDialogState *state))success\r\n                      failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Прекращение диалога с собеседником.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n   случае отсутствия текущего диалога.\r\n */\r\n\r\n- (void)closeWithSuccess:(void(^)(LTDialogState *state))success\r\n                 failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Оценка диалога с собеседником.\r\n \r\n @param vote оценка собеседника.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, параметром у которого является объект типа LTDialogState - состояние текущего обращения, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае отсутствия текущего диалога.\r\n */\r\n\r\n- (void)voteWithVote:(LTVote*)Vote\r\n             success:(void(^)())success\r\n             failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Оповещение о наборе текста.\r\n \r\n @param message набранное сообщение.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае отсутствия текущего диалога.\r\n */\r\n\r\n- (void)typingWithTypingMessage:(LTTypingMessage*)message\r\n                        success:(void(^)())success\r\n                        failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Отправка текстового сообщения.\r\n \r\n @param message текст сообщения.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result message созданое сервером сообщение.\r\n \r\n @result chatException ошибка сервиса чата. Может возникать в\r\n случае отсутствия текущего диалога.\r\n */\r\n\r\n- (void)sendMessage:(NSString*)text\r\n            success:(void(^)(LTTextMessage *message))success\r\n            failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Получение истории сообщений диалога.\r\n \r\n @param limit количество запрашиваемых сообщений из истории.\r\n\r\n @param offset количество пропускаемых сообщений истории.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n @result messages список сообщений истории чата\r\n \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)messageHistory:(int16_t)limit\r\n                offset:(int16_t)offset\r\n               success:(void(^)(NSArray *messages))success\r\n               failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Получение текущего состояния интерфейса клиента сервиса диалога.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result state текущее состояние интерфейса клиента сервиса диалога.\r\n \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)getStateWithSuccess:(void(^)(LTDialogState *state))success\r\n                    failure:(void(^)(NSException *chatException))failure;\r\n\r\n/*!\r\n Получение списка операторов с указанным статусом.\r\n \r\n @param status интересующий статус.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n @result operators список операторов с указанным статусом.\r\n \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)getOperators:(LTStatus)status\r\n             success:(void(^)(NSArray *operators))success\r\n             failure:(void(^)(NSException *error))failure;\r\n\r\n/*!\r\n Получение списка департаментов с указанным статусом.\r\n \r\n @param status интересующий статус.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result departments список департаментов с указанным статусом.\r\n \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)getDepartments:(LTStatus)status\r\n               success:(void(^)(NSArray *departments))success\r\n               failure:(void(^)(NSException *error))failure;\r\n\r\n/*!\r\n Получение списка департаментов с указанным статусом.\r\n \r\n @param department депертамент, операторы которого будут получены\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n \r\n @result operators список операторов с указанным депертаментом.\r\n \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)getDepartmentOperators:(LTDepartment*)department\r\n                       success:(void(^)(NSArray *operators))success\r\n                       failure:(void(^)(NSException *error))failure;\r\n\r\n/*!\r\n Установка имени посетителя.\r\n \r\n @param name имя посетителя.\r\n \r\n @result Вызов колбек-блока соответствующего результату. При успешном выполнении запроса вызывается\r\n колбек-блок success, в противном случае вызывается failure, параметром у которого явлется объект типа NSExeption\r\n пойманый при выполнии операции в параллельном потоке очереди SDK. \r\n @result chatException ошибка сервиса чата.\r\n */\r\n\r\n- (void)setVisitorName:(NSString *)name\r\n               success:(void(^)())success\r\n               failure:(void(^)(NSException *error))failure;\r\n@end\r\n```\r\n\r\n## С чего начать?\r\n\r\n1. Создать аккаунт в LiveTex.\r\n2. Создать операторов, группы и сайты в Личном Кабинете.\r\n3. Получить бинарный пакет SDK и добавить его в свой проект.\r\n4. Получить ключ разработчика и доступ к `sendbox` окружения для отладки.\r\n\r\nПосле выполнения вышеуказанных шагов у вас будет:\r\n- Адрес сервиса аутентификации на `sendbox` окружении. (Пример: http://authentication-sendbox.livetex.ru:9000).\r\n- Ключ SDK. (Пример: `NEVER_SHOW_THIS_KEY_TO_STRANGERS`).\r\n- Идентификатор приложения, он же идентификатор сайта полученный в Личном Кабинете (Пример: 10001350).\r\n\r\n## Первые шаги. Инициализация SDK. Android.\r\n\r\nИнициализация SDK в основном потоке приложения.\r\n\r\n```java\r\n\r\npublic void run() {\r\n\r\n  import ru.livetex.sdk.handler.IInitHandler;\r\n  import ru.livetex.sdk.handler.INotificationHandler;\r\n  import ru.livetex.sdk.*\r\n  import ru.livetex.sdk.*\r\n  import ru.livetex.capabilities.*\r\n  import ru.livetex.token.*\r\n\r\n  // клиентские пакеты\r\n  import custom.package.CustomInitHandler // реализует интерфейс IInitHandler\r\n  import custom.package.CustomNotificationHandler // реализует интерфейс INotificationHandler\r\n\r\n  // URL сервиса аутентификации.\r\n  string url = \"http://authentication-sendbox.livetex.ru:9000\";\r\n\r\n  // Ключ SDK для авторизации кодовой базы клиент.\r\n  string key = \"NEVER_SHOW_THIS_KEY_TO_STRANGERS\";\r\n\r\n  // Идентификатор приложения клиента, в текущий \r\n  // момент - это идентификатор сайта, который можно \r\n  // получить из личного кабинета.\r\n  string application = \"10001350\";\r\n\r\n  // Список возможностей реализованных в клиентском приложении.\r\n  List<Capabilities> capabilities = new ArrayList<Capabilities>();\r\n\r\n  // Получение токена аутентификации из персистентного хранилища клиента SDK.\r\n  // Реализуется на усмотрение разработчика.\r\n  String token = getTokenFromCustomClientStorage();\r\n\r\n  // Пользовательское приложение умеет вести диалог.\r\n  capabilities.add(Capabilities.CHAT);\r\n\r\n  // Пользовательское приложение умеет принимать файлы.\r\n  capabilities.add(Capabilities.FILES_RECEIVE);\r\n\r\n  Builder builder = new Builder(url, key, application);\r\n  builder.addCapabilities(capabilities);\r\n  builder.addToken(token);\r\n\r\n  Livetex livetex = new builder.build();\r\n\r\n  CustomInitHandler initHandler = new CustomInitHandler();\r\n  CustomNotificationHandler notificationHandler = new CustomNotificationHandler();\r\n\r\n  livetex.init(initHandler, notificationHandler);\r\n\r\n}\r\n```\r\n\r\n## Сценарии использования\r\n\r\n### Начало диалога с оператором\r\n\r\n![Модель](http://goo.gl/Nwr9Pv)\r\n\r\n<!--\r\n\r\n@startuml\r\n\r\n!include \"request-dialog-with-operator.puml\"\r\n  \r\n@enduml\r\n\r\n-->\r\n\r\n1. Посетитель открывает приложение с интегрированным SDK.\r\n2. Посетитель открывает окно выбора оператора для диалога.\r\n3. Посетитель выбирает оператора для диалога.\r\n4. Система назначает посетителю оператора для диалога.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}